
MCP4921 Ramp no interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000c2  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000172  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000118  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000010e  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000199  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008b  00000000  00000000  0000070d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	
}

void SPI_MasterInit(void)
{
	DDRB = (1<<DDB3)|(1<<DDB5) |(1<<DDB2); // Set MOSI, SCK, SS as output, all others input 	
  90:	8c e2       	ldi	r24, 0x2C	; 44
  92:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR0)|(0<<SPR1)|(1<<SPI2X); // Enables SPI, Master, set clock rate, double speed SPI
  94:	81 e5       	ldi	r24, 0x51	; 81
  96:	8c bd       	out	0x2c, r24	; 44
	SPI_MasterInit();
	int i;
	i = MCP_START;  // MCP4921 initial value
	while(1)
	{
	for (i=MCP_START; i<MCP_START+4096; i+=2)
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e3       	ldi	r25, 0x30	; 48
	{
		highbyte = i>>8;
		lowbyte = i;
  9c:	28 2f       	mov	r18, r24
		PORTB &= ~(1<<2); //SS sets to low
  9e:	2a 98       	cbi	0x05, 2	; 5
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR0)|(0<<SPR1)|(1<<SPI2X); // Enables SPI, Master, set clock rate, double speed SPI
}

void SPI_MasterTransmit(char cData)
{
	SPDR = cData; // Transfer SPI data to register
  a0:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF))); 	// Waits till SPI transfer is completed
  a2:	0d b4       	in	r0, 0x2d	; 45
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <main+0x12>
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR0)|(0<<SPR1)|(1<<SPI2X); // Enables SPI, Master, set clock rate, double speed SPI
}

void SPI_MasterTransmit(char cData)
{
	SPDR = cData; // Transfer SPI data to register
  a8:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & (1<<SPIF))); 	// Waits till SPI transfer is completed
  aa:	0d b4       	in	r0, 0x2d	; 45
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <main+0x1a>
		highbyte = i>>8;
		lowbyte = i;
		PORTB &= ~(1<<2); //SS sets to low
		SPI_MasterTransmit(highbyte);
		SPI_MasterTransmit(lowbyte);
		PORTB |= 1<<2;   //SS sets to high
  b0:	2a 9a       	sbi	0x05, 2	; 5
	SPI_MasterInit();
	int i;
	i = MCP_START;  // MCP4921 initial value
	while(1)
	{
	for (i=MCP_START; i<MCP_START+4096; i+=2)
  b2:	02 96       	adiw	r24, 0x02	; 2
  b4:	81 15       	cp	r24, r1
  b6:	20 e4       	ldi	r18, 0x40	; 64
  b8:	92 07       	cpc	r25, r18
  ba:	74 f7       	brge	.-36     	; 0x98 <main+0x8>
  bc:	ef cf       	rjmp	.-34     	; 0x9c <main+0xc>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
